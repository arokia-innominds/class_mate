require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe AssignmentsController, type: :controller do
  render_views
  # This should return the minimal set of attributes required to create a valid
  # Assignment. As you add validations to Assignment, be sure to
  # adjust the attributes here as well.
  let(:class_room) {FactoryGirl.create(:class_room)}
  let(:user) { FactoryGirl.create(:user, class_room: class_room)}
  let!(:valid_attributes) {{title: 'Test', class_room_id: class_room.id}}
  let!(:invalid_attributes) {{title: ''}}

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # AssignmentsController. Be sure to keep this updated too.


  before do
    controller.stub(:authenticate_user).and_return(true)
    controller.stub(:current_user).and_return(user)
  end

  describe "GET #index" do
    it "assigns all assignments as assignments" do
      assignment = Assignment.create! valid_attributes
      get :index ,{class_room_id: class_room.id, format: :json}
      expect(assigns(:assignments)).to eq([assignment])
    end
  end

  describe "GET #show" do
    it "assigns the requested assignment as @assignment" do
      assignment = Assignment.create! valid_attributes
      get :show, {:id => assignment.to_param, class_room_id: class_room.id, format: :json}
      expect(assigns(:assignment)).to eq(assignment)
    end
  end

  describe "GET #new" do
    it "assigns a new assignment as @assignment" do
      get :new, {class_room_id: class_room.id, format: :json}
      expect(assigns(:assignment)).to be_a_new(Assignment)
    end
  end

  describe "GET #edit" do
    it "assigns the requested assignment as @assignment" do
      assignment = Assignment.create! valid_attributes
      get :edit, {:id => assignment.to_param, class_room_id: class_room.id, format: :json}
      expect(assigns(:assignment)).to eq(assignment)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Assignment" do
        expect {
          post :create, {:assignment => valid_attributes, class_room_id: class_room.id, format: :json}
        }.to change(Assignment, :count).by(1)
      end

      it "assigns a newly created assignment as @assignment" do
        post :create, {:assignment => valid_attributes, class_room_id: class_room.id, format: :json}
        expect(assigns(:assignment)).to be_a(Assignment)
        expect(assigns(:assignment)).to be_persisted
      end

      it "redirects to the created assignment" do
        post :create, {:assignment => valid_attributes, class_room_id: class_room.id, format: :json}
        expect(response.status).to eq(200)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved assignment as @assignment" do
        post :create, {:assignment => invalid_attributes, class_room_id: class_room.id, format: :json}
        expect(assigns(:assignment)).to be_a_new(Assignment)
      end

      it "re-renders the 'new' template" do
        post :create, {:assignment => invalid_attributes, class_room_id: class_room.id, format: :json}
        expect(JSON.parse(response.body)['title']).to eq(["can't be blank"])
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {{title: 'Test123', class_room_id: class_room.id}}
      it "updates the requested assignment" do
        assignment = Assignment.create! valid_attributes
        put :update, {:id => assignment.to_param, :assignment => new_attributes, class_room_id: class_room.id, format: :json}
        assignment.reload
      end

      it "assigns the requested assignment as @assignment" do
        assignment = Assignment.create! valid_attributes
        put :update, {:id => assignment.to_param, :assignment => valid_attributes, class_room_id: class_room.id, format: :json}
        expect(assigns(:assignment)).to eq(assignment)
      end

      it "redirects to the assignment" do
        assignment = Assignment.create! valid_attributes
        put :update, {:id => assignment.to_param, :assignment => valid_attributes, class_room_id: class_room.id, format: :json}
        expect(response.status).to eq(200)
      end
    end

    context "with invalid params" do
      it "assigns the assignment as @assignment" do
        assignment = Assignment.create! valid_attributes
        put :update, {:id => assignment.to_param, :assignment => invalid_attributes, class_room_id: class_room.id, format: :json}
        expect(assigns(:assignment)).to eq(assignment)
      end

      it "re-renders the 'edit' template" do
        assignment = Assignment.create! valid_attributes
        put :update, {:id => assignment.to_param, :assignment => invalid_attributes, class_room_id: class_room.id, format: :json}
        expect(JSON.parse(response.body)['title']).to eq(["can't be blank"])
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested assignment" do
      assignment = Assignment.create! valid_attributes
      expect {
        delete :destroy, {:id => assignment.to_param, class_room_id: class_room.id, format: :json}
      }.to change(Assignment, :count).by(-1)
    end

    it "redirects to the assignments list" do
      assignment = Assignment.create! valid_attributes
      delete :destroy, {:id => assignment.to_param, class_room_id: class_room.id, format: :json}
      expect(response.status).to eq(204)
    end
  end

  describe 'POST submission' do
    it 'submit the assignments' do
      assignment=Assignment.create! valid_attributes
      post :submission ,{id: assignment.id, class_room_id: class_room.id, submission: {description: 'test'}}
      expect(response.status).to eq 302
    end
  end

  describe 'GET show_submission' do
    it 'display  the submissions' do
      assignment=Assignment.create! valid_attributes
      get :show_submission, {id: assignment.id, class_room_id: class_room.id, format: :json}
      expect(response.status).to eq 200
    end
  end

  describe '#set assignment' do
    it 'should call the before action' do
      assignment = Assignment.create! valid_attributes
      expect(controller).to receive(:set_assignment).and_call_original 
      get :show, {:id => assignment.to_param, class_room_id: class_room.id, format: :json}     
    end
  end

end
